// SPDX-FileCopyrightText: 2023-2024 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

// Package piv provides an ECDH implementation backed by a PIV token.
package piv

import (
	"crypto/ecdsa"
	"crypto/x509"
	"errors"
	"fmt"

	"cunicu.li/hawkes/ecdh"
	"github.com/ebfe/scard"
	"github.com/go-piv/piv-go/piv"
	"github.com/katzenpost/nyquist/dh"
)

var (
	_ ecdh.PrivateKey = (*PrivateKey)(nil)

	errSerial         = errors.New("failed to get serial")
	errNoCard         = errors.New("no card found")
	errInvalidSlot    = errors.New("invalid slot")
	errInvalidKeyType = errors.New("invalid key type")
)

type PrivateKey struct {
	card   string
	serial uint32
	pin    string
	slot   piv.Slot

	publicKey *ecdsa.PublicKey
}

func LoadPrivateKey() (kp *PrivateKey, err error) {
	slot, ok := slotFromKey(cfg.Slot)
	if !ok {
		return nil, errInvalidSlot
	}

	kp = &PrivateKey{
		card:   cfg.Card,
		serial: cfg.Serial,
		pin:    cfg.PIN,
		slot:   slot,
	}

	card, err := kp.getCard()
	if err != nil {
		return nil, err
	}
	defer card.Close()

	crt, err := card.Certificate(kp.slot)
	if err != nil {
		return nil, fmt.Errorf("failed to get certificate: %w", err)
	}

	if crt.PublicKeyAlgorithm != x509.ECDSA {
		return nil, fmt.Errorf("%w: %s", errInvalidKeyType, crt.PublicKeyAlgorithm)
	}

	kp.publicKey, ok = crt.PublicKey.(*ecdsa.PublicKey)
	if !ok {
		return nil, errInvalidKeyType
	}

	return kp, nil
}

func (kp *PrivateKey) DH(pk dh.PublicKey) ([]byte, error) {
	card, err := kp.getCard()
	if err != nil {
		return nil, err
	}
	defer card.Close()

	sk, err := card.PrivateKey(kp.slot, kp.publicKey, piv.KeyAuth{
		PIN: kp.pin,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to get secret key: %w", err)
	}

	skECDSA, ok := sk.(*piv.ECDSAPrivateKey)
	if !ok {
		return nil, fmt.Errorf("%w: %T", errInvalidKeyType, sk)
	}

	pkECDH, ok := pk.(*ecdh.PublicKey)
	if !ok {
		return nil, fmt.Errorf("%w: %T", errInvalidKeyType, pk)
	}

	pkECDSA, err := pkECDH.ECDSA()
	if err != nil {
		return nil, err
	}

	return skECDSA.SharedKey(pkECDSA)
}

// Public returns the public key of the keypair.
func (kp *PrivateKey) Public() dh.PublicKey {
	pkECDH, err := kp.publicKey.ECDH()
	if err != nil {
		return nil
	}

	return &ecdh.PublicKey{
		PublicKey: pkECDH,
	}
}

func slotFromKey(key uint32) (piv.Slot, bool) {
	switch key {
	case piv.SlotAuthentication.Key:
		return piv.SlotAuthentication, true
	case piv.SlotSignature.Key:
		return piv.SlotSignature, true
	case piv.SlotCardAuthentication.Key:
		return piv.SlotCardAuthentication, true
	case piv.SlotKeyManagement.Key:
		return piv.SlotKeyManagement, true
	}

	return piv.RetiredKeyManagementSlot(key)
}

func Keys(card *scard.Card) ([]PrivateKey, error) {
	sts, err := card.Status()
	if err != nil {
		return nil, fmt.Errorf("failed to get card status: %w", err)
	}

	piv.Open(sts.Reader)

	return nil, errors.ErrUnsupported
}
